//
// Generated file, do not edit! Created by opp_msgtool 6.0 from messages/DataPacket.msg.
//

#ifndef __DATAPACKET_M_H
#define __DATAPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class DataPacket;
/**
 * Class generated from <tt>messages/DataPacket.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet DataPacket
 * {
 *     int srcNode;
 *     int dstNode;
 * 
 *     int ttl;
 *     int lastRouter;
 *     int l2;
 *     int l3;
 *     int l4;
 * 
 *     int lastQueue;
 *     int q2;
 *     int q3;
 *     int q4;
 *     int q5;
 * 
 *     double lastTS;
 *     double t2;
 *     double t3;
 *     double t4;
 *     double t5;
 * 
 *     int routing;
 * }
 * </pre>
 */
class DataPacket : public ::omnetpp::cPacket
{
  protected:
    int srcNode = 0;
    int dstNode = 0;
    int ttl = 0;
    int lastRouter = 0;
    int l2 = 0;
    int l3 = 0;
    int l4 = 0;
    int lastQueue = 0;
    int q2 = 0;
    int q3 = 0;
    int q4 = 0;
    int q5 = 0;
    double lastTS = 0;
    double t2 = 0;
    double t3 = 0;
    double t4 = 0;
    double t5 = 0;
    int routing = 0;

  private:
    void copy(const DataPacket& other);

  protected:
    bool operator==(const DataPacket&) = delete;

  public:
    DataPacket(const char *name=nullptr, short kind=0);
    DataPacket(const DataPacket& other);
    virtual ~DataPacket();
    DataPacket& operator=(const DataPacket& other);
    virtual DataPacket *dup() const override {return new DataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcNode() const;
    virtual void setSrcNode(int srcNode);

    virtual int getDstNode() const;
    virtual void setDstNode(int dstNode);

    virtual int getTtl() const;
    virtual void setTtl(int ttl);

    virtual int getLastRouter() const;
    virtual void setLastRouter(int lastRouter);

    virtual int getL2() const;
    virtual void setL2(int l2);

    virtual int getL3() const;
    virtual void setL3(int l3);

    virtual int getL4() const;
    virtual void setL4(int l4);

    virtual int getLastQueue() const;
    virtual void setLastQueue(int lastQueue);

    virtual int getQ2() const;
    virtual void setQ2(int q2);

    virtual int getQ3() const;
    virtual void setQ3(int q3);

    virtual int getQ4() const;
    virtual void setQ4(int q4);

    virtual int getQ5() const;
    virtual void setQ5(int q5);

    virtual double getLastTS() const;
    virtual void setLastTS(double lastTS);

    virtual double getT2() const;
    virtual void setT2(double t2);

    virtual double getT3() const;
    virtual void setT3(double t3);

    virtual double getT4() const;
    virtual void setT4(double t4);

    virtual double getT5() const;
    virtual void setT5(double t5);

    virtual int getRouting() const;
    virtual void setRouting(int routing);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline DataPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<DataPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __DATAPACKET_M_H

